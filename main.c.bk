
#define BAUD 9600
#define F_CPU 16000000UL

#include <inttypes.h>
#include <stdint.h>
#include <avr/io.h>
#include <util/delay.h>
#include <util/setbaud.h>
#include <avr/interrupt.h>
#include <math.h>
#include "mpu6050.h"
#include "mpu6050_reg.h"
#include "i2c.h"
#include "uart.h"


volatile uint8_t send_frame_signal;

int main(void){

sei();  
uart_init();
i2c_init();


DDRB |= _BV(5);

uint8_t ret;
uint8_t buff[2];


ret = i2c_start(MPU6050_ADDRESS+I2C_WRITE);
if(~ret){
	PORTB |= _BV(5);
	_delay_ms(200);
	PORTB &= ~(_BV(5));
}

mpu6050_init();


for(;;){
	//if(send_frame_signal){	
		mpu6050_read_accel_X(buff);
		uart_putchar(buff[1]);
		uart_putchar(buff[0]);
		uart_putchar('\n');
		
		send_frame_signal = 0;
		_delay_ms(20);
	//}

}
}//end of main



/*

void timer_setup(){
	TCCR1A = 0x00;
	TCCR1B = _BV(CS10);  // prescaler=64

	OCR1A = 0x1388;  // compare output A

	TIMSK1 |= _BV(OCIE1A);  //enable output compare match interrupt A
}





// timer 1 compare match A interrupt handler
SIGNAL(TIMER1_COMPA_vect){

	// blink LED, if AVR fails to send a frame in time
	if(send_frame_signal){
		PORTB |= _BV(5);
		PORTB &= ~(_BV(5));
	}

	send_frame_signal = 1; // generate signal to send frame
	TCNT1 = 0x0000; // clear timer
}




*/

